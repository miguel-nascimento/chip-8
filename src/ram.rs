const MEMORY_SIZE: usize = 4096;

const FONT_SET: [u8; 80] = [
  0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
  0x20, 0x60, 0x20, 0x20, 0x70, // 1
  0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
  0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
  0x90, 0x90, 0xF0, 0x10, 0x10, // 4
  0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
  0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
  0xF0, 0x10, 0x20, 0x40, 0x40, // 7
  0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
  0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
  0xF0, 0x90, 0xF0, 0x90, 0x90, // A
  0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
  0xF0, 0x80, 0x80, 0x80, 0xF0, // C
  0xE0, 0x90, 0x90, 0x90, 0xE0, // D
  0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
  0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

#[derive(Debug)]
pub struct Ram {
  memory: [u8; MEMORY_SIZE],
}

impl Ram {
  pub fn new() -> Self {
    let mut ram = Ram { memory: [0; 4096] };

    // initializing the fonts in memory
    for i in 0..FONT_SET.len() {
      ram.memory[i] = FONT_SET[i]
    }
    ram
  }

  pub fn write(&mut self, addr: u16, value: u8) -> () {
    // YES, IN THE ORIGINAL CHIP 8 THIS CAN OCCUR
    if addr > MEMORY_SIZE as u16 {
      panic!("write_memory: address is bigger than the memory size")
    }
    self.memory[addr as usize] = value;
  }

  pub fn read(&self, addr: u16) -> u8 {
    if addr > MEMORY_SIZE as u16 {
      panic!("read_memory: address is bigger than the memory size")
    }
    self.memory[addr as usize]
  }
}
