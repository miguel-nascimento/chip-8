use crate::ram::Ram;
use crate::cpu::Cpu;
use crate::display::Display;

const FONT_SET: [u8; 80] = [
  0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
  0x20, 0x60, 0x20, 0x20, 0x70, // 1
  0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
  0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
  0x90, 0x90, 0xF0, 0x10, 0x10, // 4
  0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
  0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
  0xF0, 0x10, 0x20, 0x40, 0x40, // 7
  0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
  0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
  0xF0, 0x90, 0xF0, 0x90, 0x90, // A
  0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
  0xF0, 0x80, 0x80, 0x80, 0xF0, // C
  0xE0, 0x90, 0x90, 0x90, 0xE0, // D
  0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
  0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

#[derive(Debug)]
pub struct Chip8 {
  mem: Ram,
  cpu: Cpu,
  display: Display,
}

impl Chip8 {
  pub fn new() -> Self {
    Chip8 {
      mem: Ram::new(),
      cpu: Cpu::new(),
      display: Display::new(),
    }
  }

  pub fn initialize(&mut self) {
    self.mem.load_fontset(FONT_SET);

  }
  
  pub fn emulate_cycle(&mut self) {
    // self.fetch();
    // self.decode();
    self.cpu.run_instruction(&mut self.mem);
  }

  // fn fetch () {}
  // fn decode () {}
}